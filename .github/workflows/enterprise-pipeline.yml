name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =================================
  # BUILD & TEST STAGE
  # =================================
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      - name: Run tests in container
        run: |
          docker run --rm \
            -e NODE_ENV=test \
            -e DB_HOST=postgres \
            --network host \
            ${{ steps.meta.outputs.tags }} \
            npm run test

  # =================================
  # DEPLOY TO DEV ENVIRONMENT
  # =================================
  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - name: Deploy to Development
        uses: azure/k8s-deploy@v1
        with:
          namespace: laten-dev
          manifests: |
            k8s/overlays/dev
          images: |
            laten-backend=${{ needs.build-and-test.outputs.image-tag }}

      - name: Run smoke tests
        run: |
          curl -f https://api-dev.laten.com/health || exit 1

  # =================================
  # DEPLOY TO STAGING ENVIRONMENT  
  # =================================
  deploy-staging:
    if: github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Deploy to Staging
        uses: azure/k8s-deploy@v1
        with:
          namespace: laten-staging
          manifests: |
            k8s/overlays/staging
          images: |
            laten-backend=${{ needs.build-and-test.outputs.image-tag }}

      - name: Run integration tests
        run: |
          npm run test:integration:staging

      - name: Run security scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: security-scan-results.sarif

  # =================================
  # DEPLOY TO PRODUCTION (Manual Approval)
  # =================================
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-test, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Manual approval checkpoint
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: tech-leads,devops-team
          minimum-approvals: 2

      - name: Deploy to Production
        uses: azure/k8s-deploy@v1
        with:
          namespace: laten-prod
          manifests: |
            k8s/overlays/prod
          images: |
            laten-backend=${{ needs.build-and-test.outputs.image-tag }}

      - name: Post-deployment verification
        run: |
          curl -f https://api.laten.com/health || exit 1
          npm run test:e2e:production

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "ðŸš€ Production deployment successful!"
