name: Backend CI/CD

on:
  push:
    branches: [ feature/backend-development, master ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'backend/**'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: laten_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Fix security vulnerabilities
      working-directory: ./backend
      run: npm audit fix

    - name: Create test environment file
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "DB_TYPE=postgres" >> .env.test
        echo "DB_HOST=localhost" >> .env.test
        echo "DB_PORT=5432" >> .env.test
        echo "DB_USERNAME=postgres" >> .env.test
        echo "DB_PASSWORD=postgres" >> .env.test
        echo "DB_DATABASE=laten_test_$(date +%s)" >> .env.test
        echo "JWT_SECRET=test_jwt_secret_key_for_ci" >> .env.test
        echo "JWT_EXPIRES_IN=24h" >> .env.test

    - name: Create unique test database
      run: |
        TEST_DB_NAME="laten_test_$(date +%s)"
        PGPASSWORD=postgres createdb -h localhost -U postgres $TEST_DB_NAME
        echo "TEST_DB_NAME=$TEST_DB_NAME" >> $GITHUB_ENV

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Run linting
      working-directory: ./backend
      run: npm run lint

    - name: Run type checking
      working-directory: ./backend
      run: npx tsc --noEmit

    - name: Run unit tests
      working-directory: ./backend
      run: npm run test
      env:
        NODE_ENV: test
        DB_TYPE: postgres
        DB_DATABASE: ${{ env.TEST_DB_NAME }}
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test_jwt_secret_key_for_ci

    - name: Run test coverage
      working-directory: ./backend
      run: npm run test:cov
      env:
        NODE_ENV: test
        DB_TYPE: postgres
        DB_DATABASE: ${{ env.TEST_DB_NAME }}
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test_jwt_secret_key_for_ci

    - name: Run e2e tests
      working-directory: ./backend
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DB_TYPE: postgres
        DB_DATABASE: ${{ env.TEST_DB_NAME }}
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test_jwt_secret_key_for_ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Build application
      working-directory: ./backend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-dist
        path: backend/dist/
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run security audit
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan (optional)
      uses: snyk/actions/node@master
      continue-on-error: true
      if: ${{ secrets.SNYK_TOKEN != '' }}
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=backend/package.json --severity-threshold=high

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/feature/backend-development'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test build only)
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: laten-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/feature/backend-development'
    environment: staging

    steps:
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl, docker-compose, or other deployment tools

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
