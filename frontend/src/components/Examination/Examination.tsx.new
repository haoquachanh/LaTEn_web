'use client';
import React, { useContext, useEffect, useState, useMemo, useCallback, Suspense, lazy } from 'react';
import { ExaminationContext } from '@/contexts/ExaminationContext';

// Import components lazily to avoid loading them until needed
const ReviewModalContent = lazy(() => import('./ReviewModalContent'));
const SubmitConfirmModal = lazy(() => import('./SubmitConfirmModal'));

export type Question = {
  id: string;
  question: string;
  answers?: string[];
  correctAnswer: string;
};

export default function ExaminationContent() {
  const [start, setStart] = useState(false);
  const [type, setType] = useState('');
  const [content, setContent] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showReview, setShowReview] = useState(false);
  const [showSubmitConfirm, setShowSubmitConfirm] = useState(false);
  const [userAnswers, setUserAnswers] = useState<{ [key: string]: string }>({});
  const [flaggedQuestions, setFlaggedQuestions] = useState<string[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const { page, numberOfQuestions, changePage, init, time, changeTime } = useContext(ExaminationContext);

  const questions: Question[] = [
    {
      question: 'Which of the following is the correct form of the present perfect tense?',
      answers: ['I have went', 'I have gone', 'I had gone', 'I will have gone'],
      correctAnswer: 'I have gone',
      id: '1',
    },
    {
      question: 'What is the opposite of "difficult"?',
      answers: ['Hard', 'Easy', 'Complex', 'Tough'],
      correctAnswer: 'Easy',
      id: '2',
    },
    {
      question: 'Which word is a synonym for "happy"?',
      answers: ['Sad', 'Angry', 'Joyful', 'Tired'],
      correctAnswer: 'Joyful',
      id: '3',
    },
    {
      question: 'Choose the correct article: "___ university"',
      answers: ['A', 'An', 'The', 'No article'],
      correctAnswer: 'A',
      id: '4',
    },
    {
      question: 'What does "procrastinate" mean?',
      answers: ['To do immediately', 'To delay', 'To organize', 'To complete'],
      correctAnswer: 'To delay',
      id: '5',
    },
  ];

  const examTypes = [
    { id: 'multiple', label: 'Multiple Choice', icon: '📝', description: 'Choose from multiple options' },
    { id: 'truefalse', label: 'True or False', icon: '✓✗', description: 'Simple true/false questions' },
    { id: 'short', label: 'Short Answer', icon: '📄', description: 'Brief written responses' },
    { id: 'essay', label: 'Essay', icon: '📋', description: 'Detailed written answers' },
  ];

  const subjects = [
    { id: 'grammar', label: 'Grammar', icon: '📚', color: 'primary' },
    { id: 'vocabulary', label: 'Vocabulary', icon: '📖', color: 'secondary' },
    { id: 'reading', label: 'Reading', icon: '👁️', color: 'accent' },
    { id: 'listening', label: 'Listening', icon: '👂', color: 'info' },
  ];

  const handleStartExam = () => {
    if (!type || !content) return;
    setIsLoading(true);
    setTimeout(() => {
      setStart(true);
      init(time);
      setIsLoading(false);
    }, 1000);
  };

  const handleEndExam = () => {
    setStart(false);
    setShowReview(false);
    setShowSubmitConfirm(false);
  };

  const handleAnswerChange = (questionId: string, answer: string) => {
    setUserAnswers((prev) => ({
      ...prev,
      [questionId]: answer,
    }));
  };

  const handleFlagQuestion = (questionId: string) => {
    setFlaggedQuestions((prev) =>
      prev.includes(questionId) ? prev.filter((id) => id !== questionId) : [...prev, questionId],
    );
  };

  const handleReviewToggle = () => {
    setShowReview(!showReview);
  };

  const handleSubmitExam = () => {
    setShowSubmitConfirm(true);
  };

  const handleConfirmSubmit = () => {
    setIsSubmitting(true);
    // Simulate submission
    setTimeout(() => {
      setIsSubmitting(false);
      setShowSubmitConfirm(false);
      setStart(false);
      // Here you would typically navigate to results page
      alert('Exam submitted successfully!');
    }, 2000);
  };

  const getAnsweredCount = () => {
    return Object.keys(userAnswers).length;
  };

  const getUnansweredQuestions = () => {
    return questions.filter((q) => !userAnswers[q.id]);
  };

  // Modal components have been moved to separate files to improve performance

  return (
    <>
      {!start ? (
        <div className="container mx-auto p-4 max-w-screen-lg">
          <div className="flex flex-col md:flex-row gap-6 items-start">
            {/* Exam Setup Panel */}
            <div className="w-full md:w-1/3 bg-base-100 rounded-box p-6 shadow-lg">
              <h2 className="text-xl font-bold mb-4">Exam Setup</h2>

              {/* Type Selection */}
              <div className="mb-6">
                <h3 className="text-base font-medium mb-2">Select Exam Type</h3>
                <div className="grid grid-cols-2 gap-2">
                  {examTypes.map((examType) => (
                    <div
                      key={examType.id}
                      className={`flex flex-col p-3 rounded-lg cursor-pointer transition-colors ${
                        type === examType.id ? 'bg-primary text-primary-content' : 'bg-base-200 hover:bg-base-300'
                      }`}
                      onClick={() => setType(examType.id)}
                    >
                      <div className="text-2xl mb-1">{examType.icon}</div>
                      <div className="font-medium">{examType.label}</div>
                      <div className="text-xs opacity-80">{examType.description}</div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Subject Selection */}
              <div className="mb-6">
                <h3 className="text-base font-medium mb-2">Select Subject</h3>
                <div className="grid grid-cols-2 gap-2">
                  {subjects.map((subject) => (
                    <div
                      key={subject.id}
                      className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${
                        content === subject.id
                          ? `bg-${subject.color} text-${subject.color}-content`
                          : 'bg-base-200 hover:bg-base-300'
                      }`}
                      onClick={() => setContent(subject.id)}
                    >
                      <div className="text-xl mr-2">{subject.icon}</div>
                      <div className="font-medium">{subject.label}</div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Time Selection */}
              <div className="mb-6">
                <h3 className="text-base font-medium mb-2">Select Time Limit</h3>
                <div className="flex gap-2">
                  {[15, 30, 45, 60].map((minutes) => (
                    <button
                      key={minutes}
                      className={`flex-1 btn btn-outline ${time === minutes ? 'btn-primary' : ''}`}
                      onClick={() => changeTime(minutes)}
                    >
                      {minutes} min
                    </button>
                  ))}
                </div>
              </div>

              {/* Start Button */}
              <button
                className="btn btn-primary btn-block"
                onClick={handleStartExam}
                disabled={!type || !content || isLoading}
              >
                {isLoading ? <span className="loading loading-spinner"></span> : 'Start Exam'}
              </button>
            </div>

            {/* Exam Preview */}
            <div className="w-full md:w-2/3 bg-base-100 rounded-box p-6 shadow-lg">
              <h2 className="text-xl font-bold mb-4">Exam Preview</h2>

              <div className="bg-base-200 p-4 rounded-lg mb-4">
                <div className="flex flex-col md:flex-row items-start md:items-center justify-between mb-3">
                  <h3 className="text-lg font-medium">
                    {type ? examTypes.find((t) => t.id === type)?.label || 'Select an exam type' : 'Select an exam type'}
                  </h3>
                  <div className="flex gap-2 mt-1 md:mt-0">
                    {content ? (
                      <span className={`badge badge-${subjects.find((s) => s.id === content)?.color || 'neutral'}`}>
                        {subjects.find((s) => s.id === content)?.label || ''}
                      </span>
                    ) : null}
                    {time ? <span className="badge badge-outline">{time} minutes</span> : null}
                  </div>
                </div>

                <div className="divider my-2"></div>

                {type && content ? (
                  <div className="space-y-4">
                    <div className="bg-base-100 p-3 rounded-lg">
                      <p className="text-sm mb-1">Sample Question:</p>
                      <p className="font-medium">
                        {type === 'multiple' && 'Choose the correct answer from the options below.'}
                        {type === 'truefalse' && 'Determine whether the statement is true or false.'}
                        {type === 'short' && 'Provide a brief answer to the question below.'}
                        {type === 'essay' && 'Write a detailed response to the prompt below.'}
                      </p>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {type === 'multiple' &&
                        ['Option A', 'Option B', 'Option C', 'Option D'].map((opt) => (
                          <div key={opt} className="bg-base-100 py-2 px-4 rounded-lg text-sm">
                            {opt}
                          </div>
                        ))}
                      {type === 'truefalse' && (
                        <>
                          <div className="bg-base-100 py-2 px-4 rounded-lg text-sm">True</div>
                          <div className="bg-base-100 py-2 px-4 rounded-lg text-sm">False</div>
                        </>
                      )}
                      {type === 'short' && <div className="bg-base-100 p-3 rounded-lg w-full h-12"></div>}
                      {type === 'essay' && <div className="bg-base-100 p-3 rounded-lg w-full h-24"></div>}
                    </div>
                    <div className="alert alert-info text-xs">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        className="stroke-current shrink-0 w-4 h-4"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        ></path>
                      </svg>
                      <span>
                        This exam contains multiple questions. You can navigate between questions and review your answers
                        before submitting.
                      </span>
                    </div>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center py-8 text-base-content/70">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="w-12 h-12 mb-3"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={1.5}
                        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                      />
                    </svg>
                    <p className="text-center max-w-xs">
                      Select an exam type and subject to see a preview of your exam.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div className="container mx-auto p-2 max-w-screen-lg">
          {/* Desktop View - Full Height Question Display */}
          <div className="hidden lg:flex flex-col h-[calc(100vh-5rem)]">
            <div className="flex-1 flex flex-col">
              {/* Question Display */}
              <div className="flex-1 bg-base-100 rounded-box p-6 shadow-lg flex flex-col">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="font-bold text-lg">
                    Question {currentQuestionIndex + 1} of {questions.length}
                  </h2>
                  <div className="flex flex-wrap gap-2">
                    <div className="badge badge-neutral">
                      {examTypes.find((t) => t.id === type)?.label || 'Exam'}
                    </div>
                    <div className={`badge badge-${subjects.find((s) => s.id === content)?.color || 'neutral'}`}>
                      {subjects.find((s) => s.id === content)?.label || 'Subject'}
                    </div>
                  </div>
                </div>

                <div className="flex-1 flex flex-col">
                  {/* Current Question */}
                  <div key={questions[currentQuestionIndex].id} className="flex-1 flex flex-col">
                    <div className="mb-6">
                      <p className="text-lg mb-4">{questions[currentQuestionIndex].question}</p>
                      <div className="space-y-2">
                        {questions[currentQuestionIndex].answers?.map((answer) => (
                          <div
                            key={answer}
                            className={`flex items-center p-3 border rounded-lg cursor-pointer ${
                              userAnswers[questions[currentQuestionIndex].id] === answer
                                ? 'border-primary bg-primary/10'
                                : 'border-base-300 hover:bg-base-200'
                            }`}
                            onClick={() => handleAnswerChange(questions[currentQuestionIndex].id, answer)}
                          >
                            <div
                              className={`w-5 h-5 flex items-center justify-center rounded-full mr-3 ${
                                userAnswers[questions[currentQuestionIndex].id] === answer
                                  ? 'bg-primary text-primary-content'
                                  : 'border border-current'
                              }`}
                            >
                              {userAnswers[questions[currentQuestionIndex].id] === answer && (
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  className="h-3 w-3"
                                  viewBox="0 0 20 20"
                                  fill="currentColor"
                                >
                                  <path
                                    fillRule="evenodd"
                                    d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                    clipRule="evenodd"
                                  />
                                </svg>
                              )}
                            </div>
                            {answer}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* Navigation Arrows */}
                  <div className="flex justify-between mt-4">
                    <button
                      className="btn btn-outline"
                      onClick={() => setCurrentQuestionIndex((prev) => Math.max(0, prev - 1))}
                      disabled={currentQuestionIndex === 0}
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 mr-1"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path
                          fillRule="evenodd"
                          d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z"
                          clipRule="evenodd"
                        />
                      </svg>
                      Previous
                    </button>
                    <button
                      className="btn btn-outline"
                      onClick={() => setCurrentQuestionIndex((prev) => Math.min(questions.length - 1, prev + 1))}
                      disabled={currentQuestionIndex === questions.length - 1}
                    >
                      Next
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 ml-1"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                      >
                        <path
                          fillRule="evenodd"
                          d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                          clipRule="evenodd"
                        />
                      </svg>
                    </button>
                  </div>

                  {/* Question Navigation and Controls */}
                  <div className="border-t border-base-300 pt-4 mt-4">
                    <div className="flex flex-wrap justify-between items-start gap-2">
                      <div className="flex-1">
                        <h3 className="text-sm font-medium mb-2">Question Navigator</h3>
                        <div className="flex flex-wrap gap-1">
                          {questions.map((question, index) => (
                            <button
                              key={question.id}
                              className={`h-8 w-8 btn btn-sm ${
                                index === currentQuestionIndex
                                  ? 'btn-primary'
                                  : userAnswers[question.id]
                                  ? 'btn-success'
                                  : flaggedQuestions.includes(question.id)
                                  ? 'btn-warning'
                                  : 'btn-outline'
                              }`}
                              onClick={() => setCurrentQuestionIndex(index)}
                            >
                              {index + 1}
                            </button>
                          ))}
                        </div>
                      </div>
                      <div className="flex flex-col items-end gap-2">
                        <div className="flex gap-1 mb-1">
                          <button
                            className={`btn btn-sm ${
                              flaggedQuestions.includes(questions[currentQuestionIndex].id)
                                ? 'btn-warning'
                                : 'btn-outline btn-warning'
                            }`}
                            onClick={() => handleFlagQuestion(questions[currentQuestionIndex].id)}
                          >
                            {flaggedQuestions.includes(questions[currentQuestionIndex].id) ? 'Unflag' : 'Flag'}
                          </button>
                          <button
                            className="btn btn-sm btn-error btn-outline"
                            onClick={() => {
                              if (userAnswers[questions[currentQuestionIndex].id]) {
                                const newAnswers = { ...userAnswers };
                                delete newAnswers[questions[currentQuestionIndex].id];
                                setUserAnswers(newAnswers);
                              }
                            }}
                            disabled={!userAnswers[questions[currentQuestionIndex].id]}
                          >
                            Clear
                          </button>
                        </div>
                        <div className="flex gap-1">
                          <button className="btn btn-primary" onClick={handleReviewToggle}>
                            Review Answers
                          </button>
                          <button className="btn btn-success" onClick={handleSubmitExam}>
                            Submit
                          </button>
                        </div>
                        <div className="flex gap-1 mt-1">
                          <button
                            className="btn btn-outline btn-xs flex-1"
                            onClick={() => {
                              if (window.confirm('Are you sure you want to clear all flags?')) {
                                setFlaggedQuestions([]);
                              }
                            }}
                          >
                            Clear Flags
                          </button>
                          <button className="btn btn-outline btn-error btn-xs flex-1" onClick={handleEndExam}>
                            End Exam
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Mobile View - Scrollable Questions */}
          <div className="lg:hidden">
            <div className="bg-base-100 rounded-box p-4 shadow-lg mb-4">
              <div className="flex justify-between items-center">
                <h2 className="font-bold">
                  Question {currentQuestionIndex + 1} of {questions.length}
                </h2>
                <div className="flex gap-1">
                  <button
                    className={`btn btn-xs ${
                      flaggedQuestions.includes(questions[currentQuestionIndex].id)
                        ? 'btn-warning'
                        : 'btn-outline btn-warning'
                    }`}
                    onClick={() => handleFlagQuestion(questions[currentQuestionIndex].id)}
                  >
                    {flaggedQuestions.includes(questions[currentQuestionIndex].id) ? 'Unflag' : 'Flag'}
                  </button>
                  <button
                    className="btn btn-xs btn-error btn-outline"
                    onClick={() => {
                      if (userAnswers[questions[currentQuestionIndex].id]) {
                        const newAnswers = { ...userAnswers };
                        delete newAnswers[questions[currentQuestionIndex].id];
                        setUserAnswers(newAnswers);
                      }
                    }}
                    disabled={!userAnswers[questions[currentQuestionIndex].id]}
                  >
                    Clear
                  </button>
                </div>
              </div>
            </div>

            <div className="space-y-4 mb-16">
              {questions.map((question, index) => (
                <div
                  key={question.id}
                  id={`question-${index}`}
                  className={`bg-base-100 rounded-box p-4 shadow-lg ${
                    index === currentQuestionIndex ? 'ring-2 ring-primary' : ''
                  }`}
                >
                  <h3 className="flex items-center mb-3">
                    <span className="badge badge-primary mr-2">{index + 1}</span>
                    <span className="font-medium">{question.question}</span>
                  </h3>
                  <div className="space-y-2">
                    {question.answers?.map((answer) => (
                      <div
                        key={answer}
                        className={`flex items-center p-3 border rounded-lg cursor-pointer ${
                          userAnswers[question.id] === answer
                            ? 'border-primary bg-primary/10'
                            : 'border-base-300 hover:bg-base-200'
                        }`}
                        onClick={() => handleAnswerChange(question.id, answer)}
                      >
                        <div
                          className={`w-5 h-5 flex items-center justify-center rounded-full mr-3 ${
                            userAnswers[question.id] === answer
                              ? 'bg-primary text-primary-content'
                              : 'border border-current'
                          }`}
                        >
                          {userAnswers[question.id] === answer && (
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-3 w-3"
                              viewBox="0 0 20 20"
                              fill="currentColor"
                            >
                              <path
                                fillRule="evenodd"
                                d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                clipRule="evenodd"
                              />
                            </svg>
                          )}
                        </div>
                        {answer}
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>

            {/* Fixed Bottom Navigation for Mobile */}
            <div className="fixed bottom-0 left-0 right-0 bg-base-100 shadow-lg border-t border-base-300 p-3 z-10">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-1">
                  <button className="btn btn-sm btn-primary" onClick={handleReviewToggle}>
                    Review
                  </button>
                  <button className="btn btn-sm btn-success" onClick={handleSubmitExam}>
                    Submit
                  </button>
                </div>
                <div className="flex items-center gap-1">
                  <button
                    className="btn btn-sm btn-outline"
                    onClick={() => setCurrentQuestionIndex((prev) => Math.max(0, prev - 1))}
                    disabled={currentQuestionIndex === 0}
                  >
                    ←
                  </button>
                  <div className="text-xs font-semibold">
                    {currentQuestionIndex + 1}/{questions.length}
                  </div>
                  <button
                    className="btn btn-sm btn-outline"
                    onClick={() => setCurrentQuestionIndex((prev) => Math.min(questions.length - 1, prev + 1))}
                    disabled={currentQuestionIndex === questions.length - 1}
                  >
                    →
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Lazy load modals only when needed */}
      {(showReview || showSubmitConfirm) && (
        <Suspense fallback={
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="loading loading-spinner loading-lg text-primary"></div>
          </div>
        }>
          {showReview && (
            <ReviewModalContent 
              questions={questions}
              userAnswers={userAnswers}
              flaggedQuestions={flaggedQuestions}
              onClose={() => setShowReview(false)}
              onSubmit={() => {
                setShowReview(false);
                setShowSubmitConfirm(true);
              }}
              onGoToQuestion={(index) => {
                setShowReview(false);
                setCurrentQuestionIndex(index);
              }}
              onFlagToggle={handleFlagQuestion}
              getAnsweredCount={getAnsweredCount}
            />
          )}
          {showSubmitConfirm && (
            <SubmitConfirmModal 
              onClose={() => setShowSubmitConfirm(false)}
              onSubmit={handleConfirmSubmit}
              isSubmitting={isSubmitting}
              questions={questions}
              getAnsweredCount={getAnsweredCount}
              getUnansweredQuestions={getUnansweredQuestions}
              onGoToQuestion={setCurrentQuestionIndex}
            />
          )}
        </Suspense>
      )}
    </>
  );
}
